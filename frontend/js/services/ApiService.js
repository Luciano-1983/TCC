/**
 * SERVI√áO DE COMUNICA√á√ÉO COM O BACKEND (API)
 * 
 * Este arquivo √© respons√°vel por toda a comunica√ß√£o entre o frontend
 * (interface do usu√°rio) e o backend (servidor).
 * 
 * O que este servi√ßo faz:
 * - Envia dados do frontend para o backend
 * - Recebe respostas do backend
 * - Gerencia erros de comunica√ß√£o
 * - Padroniza todas as requisi√ß√µes HTTP
 * 
 * Exemplos de uso:
 * - Cadastrar usu√°rio: apiService.registerUser(dados)
 * - Fazer login: apiService.loginUser(email, senha)
 * - Buscar profissionais: apiService.getAllProfessionals()
 */

class ApiService {
    constructor() {
        // URL base para todas as requisi√ß√µes (aponta para o backend)
        this.baseURL = '/api';
        
        // Cabe√ßalhos padr√£o para todas as requisi√ß√µes
        this.defaultHeaders = {
            'Content-Type': 'application/json',  // Indica que enviamos dados em formato JSON
        };
        
        // Tempo limite para requisi√ß√µes (10 segundos)
        this.timeout = 10000;
    }

    /**
     * CONFIGURA OS CABE√áALHOS DAS REQUISI√á√ïES
     * 
     * Esta fun√ß√£o combina os cabe√ßalhos padr√£o com cabe√ßalhos espec√≠ficos
     * de cada requisi√ß√£o.
     * 
     * Par√¢metros:
     * - headers: Cabe√ßalhos espec√≠ficos para esta requisi√ß√£o
     * 
     * Retorna: Objeto com todos os cabe√ßalhos combinados
     */
    getHeaders(headers = {}) {
        return {
            ...this.defaultHeaders,  // Cabe√ßalhos padr√£o
            ...headers               // Cabe√ßalhos espec√≠ficos (sobrescrevem os padr√£o)
        };
    }

    /**
     * FUN√á√ÉO PRINCIPAL DE REQUISI√á√ÉO
     * 
     * Esta √© a fun√ß√£o que realmente faz a comunica√ß√£o com o backend.
     * Todas as outras fun√ß√µes (GET, POST, PUT, DELETE) usam esta fun√ß√£o.
     * 
     * Par√¢metros:
     * - url: Endere√ßo para onde enviar a requisi√ß√£o
     * - options: Op√ß√µes da requisi√ß√£o (m√©todo, dados, etc.)
     * 
     * Retorna: Dados recebidos do backend
     */
    async request(url, options = {}) {
        // Configura a requisi√ß√£o com todos os par√¢metros necess√°rios
        const config = {
            headers: this.getHeaders(options.headers),  // Cabe√ßalhos
            timeout: this.timeout,                      // Tempo limite
            ...options                                  // Outras op√ß√µes
        };

        try {
            console.log(`üåê Requisi√ß√£o ${config.method || 'GET'} para: ${url}`);
            
            // Faz a requisi√ß√£o para o backend
            const response = await fetch(url, config);
            
            // Verifica se a requisi√ß√£o foi bem-sucedida
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            // Converte a resposta para formato JSON
            const data = await response.json();
            console.log(`‚úÖ Resposta recebida de: ${url}`, data);
            
            return data;
        } catch (error) {
            console.error(`‚ùå Erro na requisi√ß√£o para ${url}:`, error);
            throw error;  // Re-lan√ßa o erro para ser tratado por quem chamou
        }
    }

    async get(endpoint, params = {}) {
        const url = new URL(`${this.baseURL}${endpoint}`, window.location.origin);
        
        Object.keys(params).forEach(key => {
            if (params[key] !== undefined && params[key] !== null) {
                url.searchParams.append(key, params[key]);
            }
        });

        return this.request(url.toString(), { method: 'GET' });
    }

    async post(endpoint, data = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        return this.request(url, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }

    async put(endpoint, data = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        return this.request(url, {
            method: 'PUT',
            body: JSON.stringify(data)
        });
    }

    async delete(endpoint) {
        const url = `${this.baseURL}${endpoint}`;
        
        return this.request(url, {
            method: 'DELETE'
        });
    }

    // M√©todos espec√≠ficos para usu√°rios
    async registerUser(userData) {
        return this.post('/users/register', userData);
    }

    async loginUser(credentials) {
        return this.post('/users/login', credentials);
    }

    // M√©todos espec√≠ficos para profissionais
    async registerProfessional(professionalData) {
        return this.post('/professionals/register', professionalData);
    }

    async loginProfessional(credentials) {
        return this.post('/professionals/login', credentials);
    }

    async getAllProfessionals() {
        return this.get('/professionals');
    }

    async getProfessionalById(id) {
        return this.get(`/professionals/${id}`);
    }

    async updateProfessional(id, data) {
        return this.put(`/professionals/${id}`, data);
    }

    async deleteProfessional(id) {
        return this.delete(`/professionals/${id}`);
    }

    // M√©todos de utilidade
    async healthCheck() {
        return this.get('/health');
    }

    async getStats() {
        return this.get('/stats');
    }
}

// Inst√¢ncia global do servi√ßo
const apiService = new ApiService();

// Exporta para uso em outros m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ApiService;
} else {
    window.ApiService = ApiService;
    window.apiService = apiService;
} 